datasource db {
    provider = 'postgresql'
    url = env("DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

plugin openapi {
    provider = '@zenstackhq/openapi'
    flavor = 'rest'
    output = './openapi.json'
    title = 'Auto generated API'
    version = '0.1.0'
    summary = 'Created with ZenStack'
    description = 'Auto generated API created with ZenStack'
    prefix = '/api/models'
    securitySchemes = {
        bearer: { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' },
        basic: { type: 'http', scheme: 'basic' },
    // apiKey: { type: 'apiKey', in: 'header', name: 'X-API-KEY' }
    }
}

abstract model Base {
    id          String    @id @default(cuid())
    description String?   @db.VarChar(4000)
    deleted     DateTime? @omit
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt()

    @@deny('read', deleted != null)
    /// TODO: allow all for now, will be restricted later
  @@allow('all', auth().role == 'ADMIN')
    @@allow('read', auth() != null)
}

enum PermissionName {
    AdministrativeUnit
    Category
    Organization
    User
}

enum UserRole {
    ADMIN
    USER
}


enum PermissionType {
    CREATE
    READ
    UPDATE
    DELETE
}

model User extends Base {
    email         String         @unique @email @length(6, 32)
    phone         String?        @unique
    password      String         @password @omit
    name          String
    groupUserId   String?
    locked        Boolean        @default(false) @deny('update', auth() == this)
    loginFailed   Int            @default(0) @omit @deny('all', true)

    groups        UserGroup[]
    role          UserRole
    refreshTokens RefreshToken[] @omit
    devices       Device[]       @omit
    post          Post[]

    @@unique([email, phone])
}

model UserGroup extends Base {
    name        String       @unique

    users       User[]
    permissions Permission[]
}

model Permission extends Base {
    name           PermissionName
    permissionType PermissionType
    disabled       Boolean        @default(false)

    groups         UserGroup[]

    @@unique([name, permissionType])
}

model RefreshToken extends Base {
    token     String   @unique
    userId    String
    revoked   Boolean  @default(false)
    user      User     @relation(fields: [userId], references: [id])
    deviceId  String
    device    Device   @relation(fields: [deviceId], references: [id])
    publicKey String?
    expiresAt DateTime

    @@unique([userId, deviceId])
}

model Device extends Base {
    name         String  //e.g., "iPhone", "Laptop"
    userId       String
    user         User           @relation(fields: [userId], references: [id])

    refreshToken RefreshToken[]

    @@unique([userId, name])
}

/**
 * Post model
 */
model Post {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String   @length(1, 256)
    content   String
    published Boolean  @default(false)
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String

    // allow read for all signin users
    @@allow('read', auth() != null && published)

    // full access by author
    @@allow('all', author == auth() || contains(auth().email, 'admin'))
}
